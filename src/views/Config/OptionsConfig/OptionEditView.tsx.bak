import React, { FC, useEffect, useState } from 'react';
import { OptionType } from './OptionEdit';
import { Button, Input, Space } from 'antd';
import { useTranslation } from 'react-i18next';
import { nanoid } from 'nanoid';
import { produce } from 'immer';

// 未完成组件

interface OptionAddViewProps {
  option: OptionType;
  maxLevel?: number;
}

const OptionEditView: FC<OptionAddViewProps> = (props: OptionAddViewProps) => {
  const { t } = useTranslation();

  const { option, maxLevel } = props;

  const [cascades, setCascades] = useState<OptionType>({
    label: '',
    _id: '',
    children: [],
  });

  const [selectedOption, setSelectedOption] = useState<OptionType>();
  useEffect(() => {
    const selectedOption: OptionType | undefined = cascades.children.find(i => i.isSelected);
    setSelectedOption(selectedOption);
    console.log('selectedOption---', selectedOption);
    console.log('---------------');
    console.log(cascades);
  }, [cascades]);

  /**
   * @description: 添加层级子项
   * @param {string} id
   * @return {*}
   */
  function handleAddCascade(id: string) {
    // 待优化递归
    const newOption = {
      label: '',
      _id: nanoid(),
      isSelected: false,
      children: [],
    };
    function test(list: OptionType[]) {
      for (const item of list) {
        if (item._id === id) {
          item.children.push(newOption);
          break;
        }
        if (item.children.length) {
          test(item.children);
        }
      }
    }
    if (!id) {
      setCascades(
        produce(draft => {
          draft.children.push(newOption);
        })
      );
    } else {
      setCascades(
        produce(draft => {
          test(draft.children);
        })
      );
    }
  }

  function handleDeleteCascade(id: string) {
    // 待优化递归
    function test(list: OptionType[]) {
      for (const item of list) {
        if (item._id === id) {
          const index = list.findIndex(i => i._id === id);
          list.splice(index, 1);
          break;
        }
        if (item.children?.length) {
          test(item.children);
        }
      }
    }
    setCascades(
      produce(draft => {
        test(draft.children);
      })
    );
  }

  /**
   * @description: 级联的输入框值改变，同步修改cascades
   * @param {React} e
   * @param {string} id
   * @return {*}
   */
  function onInputChange(e: React.ChangeEvent<HTMLInputElement>, id: string) {
    // 待优化递归
    function test(list: OptionType[], label: string) {
      for (const item of list) {
        if (item._id === id) {
          item.label = label;
          break;
        }
        if (item.children?.length) {
          test(item.children, label);
        }
      }
    }
    setCascades(
      produce(draft => {
        test(draft.children, e.target.value);
      })
    );
  }

  /**
   * @description: 级联的输入框聚焦，添加选中的样式
   * @param {React} e
   * @param {string} id
   * @return {*}
   */
  function onInputFocus(e: React.ChangeEvent<HTMLInputElement>, id: string) {
    // 待优化递归
    function test(list: OptionType[]) {
      for (const item of list) {
        if (item._id === id) {
          list.forEach(i => (i.isSelected = false));
          item.isSelected = true;
          break;
        }
        if (item.children.length) {
          test(item.children);
        }
      }
    }
    setCascades(
      produce(draft => {
        test(draft.children);
      })
    );
    console.log(cascades);
  }

  return (
    <Space>
      <div className="border border-solid border-gray-100">
        <ul className="w-60 h-80 overflow-y-scroll m-0">
          {cascades.children.map(item => {
            return (
              <li
                key={item._id}
                className={`px-1 flex items-center ${item.isSelected ? 'bg-slate-200' : ''}`}
              >
                <Space>
                  <Input
                    placeholder={t('question.placeholder.input')}
                    bordered={false}
                    value={item.label}
                    onChange={e => onInputChange(e, item._id)}
                    onFocus={e => onInputFocus(e, item._id)}
                  ></Input>
                  <Button
                    type="text"
                    danger
                    size="middle"
                    onClick={() => handleDeleteCascade(item._id)}
                  >
                    {t('public.delete')}
                  </Button>
                </Space>
              </li>
            );
          })}
        </ul>
        <div className="text-center py-3">
          <Button type="primary" onClick={() => handleAddCascade(cascades._id)}>
            添加
          </Button>
        </div>
      </div>
      {/* {selectedOption && renderView(selectedOption)} */}
      {selectedOption && (
        <OptionEditView option={selectedOption} maxLevel={maxLevel}></OptionEditView>
      )}
    </Space>
  );
};

export default OptionEditView;
